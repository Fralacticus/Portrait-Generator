//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/Player Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Actions"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""042f867d-a93d-498e-b0f4-5f778769f2cf"",
            ""actions"": [
                {
                    ""name"": ""Open Log Menu"",
                    ""type"": ""Button"",
                    ""id"": ""d460b451-7dc0-4b1b-8c81-be5a847626a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""7d4ca10e-6937-4f72-bc24-b8b56568660e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2649dd62-0759-4181-a688-c34898fd4d5c"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Open Log Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9ea832f-4d2a-415d-9e9b-5f94b8331542"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Help Menu"",
            ""id"": ""5cfa3653-b0f9-4360-ae3b-ff709e98a443"",
            ""actions"": [
                {
                    ""name"": ""Next Page"",
                    ""type"": ""Button"",
                    ""id"": ""0e91cecd-0a9b-40a3-acde-8709130ce98b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Page"",
                    ""type"": ""Button"",
                    ""id"": ""e8978d05-ef6b-446e-b8bd-126c3abb709a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b9657a3-267a-4f5b-b189-d8b1377339c2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac09ef50-7c7a-46aa-aebc-7e7b6cd8904b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cfdd600-55af-4d4a-85ce-3f6d5c27db66"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Previous Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a5ebbd0-fc0d-48aa-a4b1-7da44dbf4741"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Previous Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_OpenLogMenu = m_General.FindAction("Open Log Menu", throwIfNotFound: true);
        m_General_Back = m_General.FindAction("Back", throwIfNotFound: true);
        // Help Menu
        m_HelpMenu = asset.FindActionMap("Help Menu", throwIfNotFound: true);
        m_HelpMenu_NextPage = m_HelpMenu.FindAction("Next Page", throwIfNotFound: true);
        m_HelpMenu_PreviousPage = m_HelpMenu.FindAction("Previous Page", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_OpenLogMenu;
    private readonly InputAction m_General_Back;
    public struct GeneralActions
    {
        private @PlayerInputActions m_Wrapper;
        public GeneralActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenLogMenu => m_Wrapper.m_General_OpenLogMenu;
        public InputAction @Back => m_Wrapper.m_General_Back;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @OpenLogMenu.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnOpenLogMenu;
                @OpenLogMenu.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnOpenLogMenu;
                @OpenLogMenu.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnOpenLogMenu;
                @Back.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenLogMenu.started += instance.OnOpenLogMenu;
                @OpenLogMenu.performed += instance.OnOpenLogMenu;
                @OpenLogMenu.canceled += instance.OnOpenLogMenu;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Help Menu
    private readonly InputActionMap m_HelpMenu;
    private IHelpMenuActions m_HelpMenuActionsCallbackInterface;
    private readonly InputAction m_HelpMenu_NextPage;
    private readonly InputAction m_HelpMenu_PreviousPage;
    public struct HelpMenuActions
    {
        private @PlayerInputActions m_Wrapper;
        public HelpMenuActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPage => m_Wrapper.m_HelpMenu_NextPage;
        public InputAction @PreviousPage => m_Wrapper.m_HelpMenu_PreviousPage;
        public InputActionMap Get() { return m_Wrapper.m_HelpMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HelpMenuActions set) { return set.Get(); }
        public void SetCallbacks(IHelpMenuActions instance)
        {
            if (m_Wrapper.m_HelpMenuActionsCallbackInterface != null)
            {
                @NextPage.started -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnNextPage;
                @NextPage.performed -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnNextPage;
                @NextPage.canceled -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnNextPage;
                @PreviousPage.started -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnPreviousPage;
                @PreviousPage.performed -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnPreviousPage;
                @PreviousPage.canceled -= m_Wrapper.m_HelpMenuActionsCallbackInterface.OnPreviousPage;
            }
            m_Wrapper.m_HelpMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextPage.started += instance.OnNextPage;
                @NextPage.performed += instance.OnNextPage;
                @NextPage.canceled += instance.OnNextPage;
                @PreviousPage.started += instance.OnPreviousPage;
                @PreviousPage.performed += instance.OnPreviousPage;
                @PreviousPage.canceled += instance.OnPreviousPage;
            }
        }
    }
    public HelpMenuActions @HelpMenu => new HelpMenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IGeneralActions
    {
        void OnOpenLogMenu(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IHelpMenuActions
    {
        void OnNextPage(InputAction.CallbackContext context);
        void OnPreviousPage(InputAction.CallbackContext context);
    }
}
